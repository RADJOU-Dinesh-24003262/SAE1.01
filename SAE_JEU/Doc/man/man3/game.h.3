.TH "/home/Theo/Téléchargements/sae/SAE_JEU/Jeu/game.h" 3 "Fri Jan 10 2025" "SAE 1.01" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/Theo/Téléchargements/sae/SAE_JEU/Jeu/game.h \- Set of usefull functions for the game\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'type\&.h'\fP
.br
\fC#include 'mingl/mingl\&.h'\fP
.br
\fC#include <chrono>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMoveToken\fP (\fBCMat\fP &Mat, const char &Move, \fBCPosition\fP &Pos, const \fBCMyParamV2\fP &Param, \fBCPosition\fP &Tp1, \fBCPosition\fP &Tp2)"
.br
.RI "Move the current token according to the character in the 2nd parameter\&. "
.ti -1c
.RI "bool \fBIsMoveLegal\fP (const \fBCMat\fP &Mat, const char &Move, const \fBCPosition\fP &Pos, const \fBCMyParamV2\fP &Param)"
.br
.RI "Test if the Move made by the player is legal, this mean if there is no wall and no out of bound\&. "
.ti -1c
.RI "std::pair< char, \fBCPosition\fP > \fBnextMove\fP (const \fBCMat\fP &Mat, const char &Move, const \fBCPosition\fP &Pos, const \fBCMyParamV2\fP &Param, \fBCPosition\fP &Tp1, \fBCPosition\fP &Tp2)"
.br
.RI "returns the contents of the next cell and its position in the matrix (even with teleporter) "
.ti -1c
.RI "bool \fBIsCollectible\fP (const \fBCMat\fP &Mat, const char &Move, const \fBCPosition\fP &Pos, const \fBCMyParamV2\fP &Param)"
.br
.RI "Test whether the content of the next move's cell is an element\&. "
.ti -1c
.RI "void \fBCalculateScore\fP (std::vector< char > &objets, int &score)"
.br
.RI "Increments the score for each item in the list\&. "
.ti -1c
.RI "void \fBSprite\fP (\fBMinGL\fP &window, int grid_x, int grid_y, int pos_x, int pos_y, int mat_x, int mat_y, std::string sprite)"
.br
.ti -1c
.RI "void \fBDisplayGrid\fP (\fBMinGL\fP &window, const \fBCMat\fP &mat, std::tuple< int, int > Screen_size)"
.br
.ti -1c
.RI "void \fBMenuP\fP (\fBMinGL\fP &window, std::vector< std::tuple< std::vector< int >, std::vector< int >, int > > clickablepool, std::tuple< int, int > Screen_size, int &menuid, std::chrono::time_point< std::chrono::steady_clock > start)"
.br
.ti -1c
.RI "void \fBOptions\fP (\fBMinGL\fP &window, std::vector< std::tuple< std::vector< int >, std::vector< int >, int > > clickablepool, std::tuple< int, int > Screen_size, int &menuid, std::chrono::time_point< std::chrono::steady_clock > start)"
.br
.ti -1c
.RI "void \fBCredits\fP (\fBMinGL\fP &window, std::vector< std::tuple< std::vector< int >, std::vector< int >, int > > clickablepool, std::tuple< int, int > Screen_size, int &menuid, std::chrono::time_point< std::chrono::steady_clock > start)"
.br
.ti -1c
.RI "void \fBPause\fP (\fBMinGL\fP &window, std::vector< std::tuple< std::vector< int >, std::vector< int >, int > > clickablepool, std::tuple< int, int > Screen_size, int &menuid, std::chrono::time_point< std::chrono::steady_clock > start)"
.br
.ti -1c
.RI "void \fBGameLoop\fP (\fBMinGL\fP &window, std::vector< std::tuple< std::vector< int >, std::vector< int >, int > >clickablepool, \fBCMat\fP Mat, int menuid, unsigned PartyNum, bool Key_UP, bool Key_DOWN, bool Key_RIGHT, bool Key_LEFT, std::tuple< int, int > Screen_size, \fBCMyParamV2\fP param, bool Victory, unsigned KMaxPartyNum, \fBCPosition\fP PosPlayer1, \fBCPosition\fP PosPlayer2, \fBCPosition\fP PosTP1, \fBCPosition\fP PosTP2, bool Player1Turn, std::pair< char, \fBCPosition\fP > N_move, std::vector< char > objetJ1, std::vector< char > objetJ2, int scoreJ1, int scoreJ2, std::vector< \fBCPosition\fP > PosMonster)"
.br
.ti -1c
.RI "int \fBppal\fP ()"
.br
.RI "new main "
.in -1c
.SH "Detailed Description"
.PP 
Set of usefull functions for the game\&. 


.PP
\fBAuthor\fP
.RS 4
Alain Casali 
.PP
Marc Laporte 
.RE
.PP
\fBVersion\fP
.RS 4
1\&.0 
.RE
.PP
\fBDate\fP
.RS 4
18 décembre 2018 
.RE
.PP

.PP
Definition in file \fBgame\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "void CalculateScore (std::vector< char > & objets, int & score)"

.PP
Increments the score for each item in the list\&. 
.PP
\fBParameters\fP
.RS 4
\fIThe\fP list of items the player has collected 
.br
\fIThe\fP score increases with each element 
.RE
.PP

.SS "bool IsCollectible (const \fBCMat\fP & Mat, const char & Move, const \fBCPosition\fP & Pos, const \fBCMyParamV2\fP & Param)"

.PP
Test whether the content of the next move's cell is an element\&. 
.PP
\fBParameters\fP
.RS 4
\fIMat\fP the matrix 
.br
\fIMove\fP the key pressed by the user 
.br
\fIPos\fP the player's position 
.br
\fIThe\fP Parameter extract from the \&.yaml file 
.RE
.PP
\fBReturns\fP
.RS 4
true if the next move's cell is an element 
.RE
.PP

.SS "bool IsMoveLegal (const \fBCMat\fP & Mat, const char & Move, const \fBCPosition\fP & Pos, const \fBCMyParamV2\fP & Param)"

.PP
Test if the Move made by the player is legal, this mean if there is no wall and no out of bound\&. 
.PP
\fBParameters\fP
.RS 4
\fIMat\fP the matrix 
.br
\fIMove\fP the key pressed by the user 
.br
\fIPos\fP the player's position 
.br
\fIThe\fP Parameter extract from the \&.yaml file 
.RE
.PP
\fBReturns\fP
.RS 4
true if the Move can be made 
.RE
.PP

.SS "void MoveToken (\fBCMat\fP & Mat, const char & Move, \fBCPosition\fP & Pos, const \fBCMyParamV2\fP & Param, \fBCPosition\fP & Tp1, \fBCPosition\fP & Tp2)"

.PP
Move the current token according to the character in the 2nd parameter\&. 
.PP
\fBParameters\fP
.RS 4
\fIMat\fP the matrix before and after the move 
.br
\fIMove\fP the key pressed by the user 
.br
\fIPos\fP the player's position before and after the move 
.br
\fIThe\fP Parameter extract from the \&.yaml file 
.br
\fITp1\fP position of the first Teleporter in Mat 
.br
\fITp2\fP position of the second Teleporter in Mat 
.RE
.PP

.SS "std::pair< char, \fBCPosition\fP > nextMove (const \fBCMat\fP & Mat, const char & Move, const \fBCPosition\fP & Pos, const \fBCMyParamV2\fP & Param, \fBCPosition\fP & Tp1, \fBCPosition\fP & Tp2)"

.PP
returns the contents of the next cell and its position in the matrix (even with teleporter) 
.PP
\fBParameters\fP
.RS 4
\fIMat\fP the matrix 
.br
\fIMove\fP the key pressed by the user 
.br
\fIPos\fP the player's position 
.br
\fIThe\fP Parameter extract from the \&.yaml file 
.br
\fIThe\fP position of teleporter number 1 
.br
\fIThe\fP position of teleporter number 2 
.RE
.PP
\fBReturns\fP
.RS 4
<content of the cell <pos x, pos y>> 
.RE
.PP

.SS "int ppal (void)"

.PP
new main 
.PP
\fBReturns\fP
.RS 4
0 if everything is OK 
.RE
.PP

.PP
Definition at line \fB427\fP of file \fBgame\&.cpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for SAE 1\&.01 from the source code\&.
