<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_game_8h" xml:lang="en-US">
<title>/home/Theo/Téléchargements/sae/SAE_JEU/Jeu/game.h File Reference</title>
<indexterm><primary>/home/Theo/Téléchargements/sae/SAE_JEU/Jeu/game.h</primary></indexterm>
<para>

<para>Set of usefull functions for the game. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;type.h&quot;
#include &quot;mingl/mingl.h&quot;
#include &lt;chrono&gt;
</programlisting>Include dependency graph for game.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="game_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="game_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_game_8h_1a8307899b579b12370e9fd3e399e42d04">MoveToken</link> (<link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp;Mat, const char &amp;Move, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp;Pos, const <link linkend="_struct_c_my_param_v2">CMyParamV2</link> &amp;Param, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp;Tp1, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp;Tp2)</para>

<para>Move the current token according to the character in the 2nd parameter. </para>
</listitem>
            <listitem><para>bool <link linkend="_game_8h_1aeb06160be5949a49243364c546d6abb6">IsMoveLegal</link> (const <link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp;Mat, const char &amp;Move, const <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp;Pos, const <link linkend="_struct_c_my_param_v2">CMyParamV2</link> &amp;Param)</para>

<para>Test if the Move made by the player is legal, this mean if there is no wall and no out of bound. </para>
</listitem>
            <listitem><para>std::pair&lt; char, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &gt; <link linkend="_game_8h_1ad05a86bb0b8cfd683ef1c60bd003e3ce">nextMove</link> (const <link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp;Mat, const char &amp;Move, const <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp;Pos, const <link linkend="_struct_c_my_param_v2">CMyParamV2</link> &amp;Param, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp;Tp1, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp;Tp2)</para>

<para>returns the contents of the next cell and its position in the matrix (even with teleporter) </para>
</listitem>
            <listitem><para>bool <link linkend="_game_8h_1ae80d4e86d02b962374473e98b15c6a1c">IsCollectible</link> (const <link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp;Mat, const char &amp;Move, const <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp;Pos, const <link linkend="_struct_c_my_param_v2">CMyParamV2</link> &amp;Param)</para>

<para>Test whether the content of the next move&apos;s cell is an element. </para>
</listitem>
            <listitem><para>void <link linkend="_game_8h_1a1edb4cf36ce7b698766f4456c2977a4b">CalculateScore</link> (std::vector&lt; char &gt; &amp;objets, int &amp;score)</para>

<para>Increments the score for each item in the list. </para>
</listitem>
            <listitem><para><anchor xml:id="_game_8h_1a23ed1f47ce57765cb2fea53223a968fa"/>void <emphasis role="strong">Sprite</emphasis> (<link linkend="_class_min_g_l">MinGL</link> &amp;window, int grid_x, int grid_y, int pos_x, int pos_y, int mat_x, int mat_y, std::string sprite)</para>
</listitem>
            <listitem><para><anchor xml:id="_game_8h_1ad2fa9861d35e6880ba732c4d42d677fb"/>void <emphasis role="strong">DisplayGrid</emphasis> (<link linkend="_class_min_g_l">MinGL</link> &amp;window, const <link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp;mat, std::tuple&lt; int, int &gt; Screen_size)</para>
</listitem>
            <listitem><para><anchor xml:id="_game_8h_1a530e82365352a76131d36a602a978087"/>void <emphasis role="strong">MenuP</emphasis> (<link linkend="_class_min_g_l">MinGL</link> &amp;window, std::vector&lt; std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; int &gt;, int &gt; &gt; clickablepool, std::tuple&lt; int, int &gt; Screen_size, int &amp;menuid, std::chrono::time_point&lt; std::chrono::steady_clock &gt; start)</para>
</listitem>
            <listitem><para><anchor xml:id="_game_8h_1ac9f54c7b2df4106d5bf5f209f2c1741d"/>void <emphasis role="strong">Options</emphasis> (<link linkend="_class_min_g_l">MinGL</link> &amp;window, std::vector&lt; std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; int &gt;, int &gt; &gt; clickablepool, std::tuple&lt; int, int &gt; Screen_size, int &amp;menuid, std::chrono::time_point&lt; std::chrono::steady_clock &gt; start)</para>
</listitem>
            <listitem><para><anchor xml:id="_game_8h_1ac7f92aebec3b6b2e6d0b4801d092c04d"/>void <emphasis role="strong">Credits</emphasis> (<link linkend="_class_min_g_l">MinGL</link> &amp;window, std::vector&lt; std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; int &gt;, int &gt; &gt; clickablepool, std::tuple&lt; int, int &gt; Screen_size, int &amp;menuid, std::chrono::time_point&lt; std::chrono::steady_clock &gt; start)</para>
</listitem>
            <listitem><para><anchor xml:id="_game_8h_1a4cf82823849638598365d899b482f17a"/>void <emphasis role="strong">Pause</emphasis> (<link linkend="_class_min_g_l">MinGL</link> &amp;window, std::vector&lt; std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; int &gt;, int &gt; &gt; clickablepool, std::tuple&lt; int, int &gt; Screen_size, int &amp;menuid, std::chrono::time_point&lt; std::chrono::steady_clock &gt; start)</para>
</listitem>
            <listitem><para><anchor xml:id="_game_8h_1a3555e46045d63ef37f994f3c358945fb"/>void <emphasis role="strong">GameLoop</emphasis> (<link linkend="_class_min_g_l">MinGL</link> &amp;window, std::vector&lt; std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; int &gt;, int &gt; &gt;clickablepool, <link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> Mat, int menuid, unsigned PartyNum, bool Key_UP, bool Key_DOWN, bool Key_RIGHT, bool Key_LEFT, std::tuple&lt; int, int &gt; Screen_size, <link linkend="_struct_c_my_param_v2">CMyParamV2</link> param, bool Victory, unsigned KMaxPartyNum, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> PosPlayer1, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> PosPlayer2, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> PosTP1, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> PosTP2, bool Player1Turn, std::pair&lt; char, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &gt; N_move, std::vector&lt; char &gt; objetJ1, std::vector&lt; char &gt; objetJ2, int scoreJ1, int scoreJ2, std::vector&lt; <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &gt; PosMonster)</para>
</listitem>
            <listitem><para>int <link linkend="_game_8h_1a0b1d64ee76933ef8f007f1208cb869a7">ppal</link> ()</para>

<para>new main </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Set of usefull functions for the game. </para>

<para><formalpara><title>Author</title>

<para>Alain Casali </para>

<para>Marc Laporte </para>
</formalpara>
<formalpara><title>Version</title>

<para>1.0 </para>
</formalpara>
<formalpara><title>Date</title>

<para>18 décembre 2018 </para>
</formalpara>
</para>
<para>
Definition in file <link linkend="_game_8h_source">game.h</link>.</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_game_8h_1a1edb4cf36ce7b698766f4456c2977a4b"/><section>
    <title>CalculateScore()</title>
<indexterm><primary>CalculateScore</primary><secondary>game.h</secondary></indexterm>
<indexterm><primary>game.h</primary><secondary>CalculateScore</secondary></indexterm>
<para><computeroutput>void CalculateScore (std::vector&lt; char &gt; &amp; objets, int &amp; score)</computeroutput></para><para>

<para>Increments the score for each item in the list. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>The</entry><entry>
<para>list of items the player has collected </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>The</entry><entry>
<para>score increases with each element </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_game_8h_1ae80d4e86d02b962374473e98b15c6a1c"/><section>
    <title>IsCollectible()</title>
<indexterm><primary>IsCollectible</primary><secondary>game.h</secondary></indexterm>
<indexterm><primary>game.h</primary><secondary>IsCollectible</secondary></indexterm>
<para><computeroutput>bool IsCollectible (const <link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp; Mat, const char &amp; Move, const <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp; Pos, const <link linkend="_struct_c_my_param_v2">CMyParamV2</link> &amp; Param)</computeroutput></para><para>

<para>Test whether the content of the next move&apos;s cell is an element. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>Mat</entry><entry>
<para>the matrix </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>Move</entry><entry>
<para>the key pressed by the user </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>Pos</entry><entry>
<para>the player&apos;s position </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>The</entry><entry>
<para>Parameter extract from the .yaml file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the next move&apos;s cell is an element </para>
</formalpara>
</para>
</section>
<anchor xml:id="_game_8h_1aeb06160be5949a49243364c546d6abb6"/><section>
    <title>IsMoveLegal()</title>
<indexterm><primary>IsMoveLegal</primary><secondary>game.h</secondary></indexterm>
<indexterm><primary>game.h</primary><secondary>IsMoveLegal</secondary></indexterm>
<para><computeroutput>bool IsMoveLegal (const <link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp; Mat, const char &amp; Move, const <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp; Pos, const <link linkend="_struct_c_my_param_v2">CMyParamV2</link> &amp; Param)</computeroutput></para><para>

<para>Test if the Move made by the player is legal, this mean if there is no wall and no out of bound. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>Mat</entry><entry>
<para>the matrix </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>Move</entry><entry>
<para>the key pressed by the user </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>Pos</entry><entry>
<para>the player&apos;s position </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>The</entry><entry>
<para>Parameter extract from the .yaml file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the Move can be made </para>
</formalpara>
</para>
</section>
<anchor xml:id="_game_8h_1a8307899b579b12370e9fd3e399e42d04"/><section>
    <title>MoveToken()</title>
<indexterm><primary>MoveToken</primary><secondary>game.h</secondary></indexterm>
<indexterm><primary>game.h</primary><secondary>MoveToken</secondary></indexterm>
<para><computeroutput>void MoveToken (<link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp; Mat, const char &amp; Move, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp; Pos, const <link linkend="_struct_c_my_param_v2">CMyParamV2</link> &amp; Param, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp; Tp1, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp; Tp2)</computeroutput></para><para>

<para>Move the current token according to the character in the 2nd parameter. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in,out</entry><entry>Mat</entry><entry>
<para>the matrix before and after the move </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>Move</entry><entry>
<para>the key pressed by the user </para>
</entry>
                            </row>
                            <row>
<entry>in,out</entry><entry>Pos</entry><entry>
<para>the player&apos;s position before and after the move </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>The</entry><entry>
<para>Parameter extract from the .yaml file </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>Tp1</entry><entry>
<para>position of the first Teleporter in Mat </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>Tp2</entry><entry>
<para>position of the second Teleporter in Mat </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_game_8h_1ad05a86bb0b8cfd683ef1c60bd003e3ce"/><section>
    <title>nextMove()</title>
<indexterm><primary>nextMove</primary><secondary>game.h</secondary></indexterm>
<indexterm><primary>game.h</primary><secondary>nextMove</secondary></indexterm>
<para><computeroutput>std::pair&lt; char, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &gt; nextMove (const <link linkend="_type_8h_1a64a592133575ccebb1b36453acbec02b">CMat</link> &amp; Mat, const char &amp; Move, const <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp; Pos, const <link linkend="_struct_c_my_param_v2">CMyParamV2</link> &amp; Param, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp; Tp1, <link linkend="_type_8h_1a7035b1162647d49def2c24ac2c2e30c1">CPosition</link> &amp; Tp2)</computeroutput></para><para>

<para>returns the contents of the next cell and its position in the matrix (even with teleporter) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>Mat</entry><entry>
<para>the matrix </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>Move</entry><entry>
<para>the key pressed by the user </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>Pos</entry><entry>
<para>the player&apos;s position </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>The</entry><entry>
<para>Parameter extract from the .yaml file </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>The</entry><entry>
<para>position of teleporter number 1 </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>The</entry><entry>
<para>position of teleporter number 2 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>&lt;content of the cell &lt;pos x, pos y&gt;&gt; </para>
</formalpara>
</para>
</section>
<anchor xml:id="_game_8h_1a0b1d64ee76933ef8f007f1208cb869a7"/><section>
    <title>ppal()</title>
<indexterm><primary>ppal</primary><secondary>game.h</secondary></indexterm>
<indexterm><primary>game.h</primary><secondary>ppal</secondary></indexterm>
<para><computeroutput>int ppal (void )</computeroutput></para><para>

<para>new main </para>
</para>

<para><formalpara><title>Returns</title>

<para>0 if everything is OK </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_game_8cpp_source_1l00427">427</link> of file <link linkend="_game_8cpp_source">game.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="game_8h_a0b1d64ee76933ef8f007f1208cb869a7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
