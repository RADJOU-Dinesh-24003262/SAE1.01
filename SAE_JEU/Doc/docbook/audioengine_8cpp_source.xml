<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_audioengine_8cpp_source" xml:lang="en-US">
<title>audioengine.cpp</title>
<indexterm><primary>/home/Theo/Téléchargements/sae/SAE_JEU/MinGL2_IUT_AIX-master/src/audio/audioengine.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_audioengine_8cpp_source_1l00001"/>00001 
<anchor xml:id="_audioengine_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_audioengine_8h">mingl/audio/audioengine.h</link>&quot;</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_cexception_8h">mingl/exception/cexception.h</link>&quot;</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00013"/>00013 
<anchor xml:id="_audioengine_8cpp_source_1l00014"/>00014 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="_audioengine_8cpp_source_1l00015"/>00015 
<anchor xml:id="_audioengine_8cpp_source_1l00016"/><link linkend="_classns_audio_1_1_audio_engine_1a6ef72eb80bef2c1b0764c40f629d2536">00016</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1a6ef72eb80bef2c1b0764c40f629d2536">nsAudio::AudioEngine::setMusic</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fileName,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;loop&#32;<emphasis role="comment">/*&#32;=&#32;true&#32;*/</emphasis>)
<anchor xml:id="_audioengine_8cpp_source_1l00017"/>00017 {
<anchor xml:id="_audioengine_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_music.openFromFile(fileName))
<anchor xml:id="_audioengine_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classns_exception_1_1_c_exception">nsException::CException</link>(fileName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;cannot&#32;be&#32;loaded&quot;</emphasis>,&#32;<link linkend="_namespacens_exception_1ae4cd0d6bbd5590a1b121347632d41376a476dd78ae414e68d7899fc90ff757999">nsException::KFileError</link>);
<anchor xml:id="_audioengine_8cpp_source_1l00020"/>00020 
<anchor xml:id="_audioengine_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;m_music.setLoop(loop);
<anchor xml:id="_audioengine_8cpp_source_1l00022"/>00022 }&#32;<emphasis role="comment">//&#32;setMusic()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00023"/>00023 
<anchor xml:id="_audioengine_8cpp_source_1l00024"/><link linkend="_classns_audio_1_1_audio_engine_1aba89263fc9f810bee40dcae229313883">00024</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1aba89263fc9f810bee40dcae229313883">nsAudio::AudioEngine::toggleMusicPlaying</link>()
<anchor xml:id="_audioengine_8cpp_source_1l00025"/>00025 {
<anchor xml:id="_audioengine_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;setMusicPlaying(m_music.getStatus()&#32;!=&#32;sf::Music::Status::Playing);
<anchor xml:id="_audioengine_8cpp_source_1l00027"/>00027 }&#32;<emphasis role="comment">//&#32;toggleMusic()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00028"/>00028 
<anchor xml:id="_audioengine_8cpp_source_1l00029"/><link linkend="_classns_audio_1_1_audio_engine_1ac21b2c1be9590a0f702c48220c59f8c9">00029</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1ac21b2c1be9590a0f702c48220c59f8c9">nsAudio::AudioEngine::setMusicPlaying</link>(<emphasis role="keywordtype">bool</emphasis>&#32;playing)
<anchor xml:id="_audioengine_8cpp_source_1l00030"/>00030 {
<anchor xml:id="_audioengine_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(playing)
<anchor xml:id="_audioengine_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_music.play();
<anchor xml:id="_audioengine_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_music.pause();
<anchor xml:id="_audioengine_8cpp_source_1l00035"/>00035 }&#32;<emphasis role="comment">//&#32;setMusicPlaying()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00036"/>00036 
<anchor xml:id="_audioengine_8cpp_source_1l00037"/><link linkend="_classns_audio_1_1_audio_engine_1a57e13380a3039e546a5f1b9242f8709b">00037</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1a57e13380a3039e546a5f1b9242f8709b">nsAudio::AudioEngine::isMusicPlaying</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00038"/>00038 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_audioengine_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_music.getStatus()&#32;==&#32;sf::Music::Status::Playing;
<anchor xml:id="_audioengine_8cpp_source_1l00040"/>00040 }&#32;<emphasis role="comment">//&#32;isMusicPlaying()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00041"/>00041 
<anchor xml:id="_audioengine_8cpp_source_1l00042"/><link linkend="_classns_audio_1_1_audio_engine_1a4c88595136327b3805c0322a9a8d2a0f">00042</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1a4c88595136327b3805c0322a9a8d2a0f">nsAudio::AudioEngine::loadSound</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;&#32;fileName)
<anchor xml:id="_audioengine_8cpp_source_1l00043"/>00043 {
<anchor xml:id="_audioengine_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(list&lt;pair&lt;string,&#32;sf::SoundBuffer&gt;&gt;::iterator&#32;it(m_buffers.begin());&#32;it&#32;!=&#32;m_buffers.end();&#32;++it)
<anchor xml:id="_audioengine_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(it-&gt;first&#32;==&#32;fileName)
<anchor xml:id="_audioengine_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_audioengine_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;sf::SoundBuffer&#32;sb;
<anchor xml:id="_audioengine_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!sb.loadFromFile(fileName))
<anchor xml:id="_audioengine_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classns_exception_1_1_c_exception">nsException::CException</link>(fileName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;cannot&#32;be&#32;loaded&quot;</emphasis>,&#32;<link linkend="_namespacens_exception_1ae4cd0d6bbd5590a1b121347632d41376a476dd78ae414e68d7899fc90ff757999">nsException::KFileError</link>);
<anchor xml:id="_audioengine_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;m_buffers.push_front(make_pair(fileName,&#32;sb));
<anchor xml:id="_audioengine_8cpp_source_1l00051"/>00051 }&#32;<emphasis role="comment">//&#32;loadSound()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00052"/>00052 
<anchor xml:id="_audioengine_8cpp_source_1l00053"/><link linkend="_classns_audio_1_1_audio_engine_1a2b0a1a9b1cb90e1180ddedb5b9e2fad1">00053</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1a2b0a1a9b1cb90e1180ddedb5b9e2fad1">nsAudio::AudioEngine::removeBuffer</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;&#32;fileName)
<anchor xml:id="_audioengine_8cpp_source_1l00054"/>00054 {
<anchor xml:id="_audioengine_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(list&lt;pair&lt;string,&#32;sf::SoundBuffer&gt;&gt;::iterator&#32;it(m_buffers.begin());&#32;it&#32;!=&#32;m_buffers.end();&#32;++it)
<anchor xml:id="_audioengine_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;{
<anchor xml:id="_audioengine_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(it-&gt;first&#32;==&#32;fileName)
<anchor xml:id="_audioengine_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_audioengine_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_buffers.erase(it);
<anchor xml:id="_audioengine_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_audioengine_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioengine_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioengine_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classns_exception_1_1_c_exception">nsException::CException</link>(fileName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;does&#32;not&#32;exist&quot;</emphasis>,&#32;<link linkend="_namespacens_exception_1ae4cd0d6bbd5590a1b121347632d41376abf0d316d427bbd6c967347e91afd572f">nsException::KErrArg</link>);
<anchor xml:id="_audioengine_8cpp_source_1l00064"/>00064 }&#32;<emphasis role="comment">//&#32;removeBuffer()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00065"/>00065 
<anchor xml:id="_audioengine_8cpp_source_1l00066"/><link linkend="_classns_audio_1_1_audio_engine_1ac05b3e0d2fd9ecfd1ad8eb110f021bf3">00066</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1ac05b3e0d2fd9ecfd1ad8eb110f021bf3">nsAudio::AudioEngine::emptyBufferList</link>()
<anchor xml:id="_audioengine_8cpp_source_1l00067"/>00067 {
<anchor xml:id="_audioengine_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;m_buffers.clear();
<anchor xml:id="_audioengine_8cpp_source_1l00069"/>00069 }&#32;<emphasis role="comment">//&#32;emptyBufferList()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00070"/>00070 
<anchor xml:id="_audioengine_8cpp_source_1l00071"/><link linkend="_classns_audio_1_1_audio_engine_1ac1343ed3afe38eb80a222969f3d74d6d">00071</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1ac1343ed3afe38eb80a222969f3d74d6d">nsAudio::AudioEngine::startMusicFromBeginning</link>()
<anchor xml:id="_audioengine_8cpp_source_1l00072"/>00072 {
<anchor xml:id="_audioengine_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;m_music.stop();
<anchor xml:id="_audioengine_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;m_music.play();
<anchor xml:id="_audioengine_8cpp_source_1l00075"/>00075 }&#32;<emphasis role="comment">//&#32;startMusicFromBeginning()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00076"/>00076 
<anchor xml:id="_audioengine_8cpp_source_1l00077"/><link linkend="_classns_audio_1_1_audio_engine_1a47d769cc331578a398f422ff497505c8">00077</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1a47d769cc331578a398f422ff497505c8">nsAudio::AudioEngine::playSoundFromBuffer</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fileName)
<anchor xml:id="_audioengine_8cpp_source_1l00078"/>00078 {
<anchor xml:id="_audioengine_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ok(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_audioengine_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(list&lt;pair&lt;string,&#32;sf::SoundBuffer&gt;&gt;::iterator&#32;it(m_buffers.begin());&#32;it&#32;!=&#32;m_buffers.end();&#32;++it)
<anchor xml:id="_audioengine_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;{
<anchor xml:id="_audioengine_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(it-&gt;first&#32;==&#32;fileName)
<anchor xml:id="_audioengine_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_audioengine_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sounds.emplace_front(it-&gt;second);
<anchor xml:id="_audioengine_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sounds.front().play();
<anchor xml:id="_audioengine_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ok&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_audioengine_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioengine_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioengine_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ok)
<anchor xml:id="_audioengine_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classns_exception_1_1_c_exception">nsException::CException</link>(fileName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;buffer&#32;not&#32;found&quot;</emphasis>,&#32;<link linkend="_namespacens_exception_1ae4cd0d6bbd5590a1b121347632d41376abf0d316d427bbd6c967347e91afd572f">nsException::KErrArg</link>);
<anchor xml:id="_audioengine_8cpp_source_1l00091"/>00091 
<anchor xml:id="_audioengine_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;removeOldSounds();
<anchor xml:id="_audioengine_8cpp_source_1l00093"/>00093 }&#32;<emphasis role="comment">//&#32;playSoundFromBuffer()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00094"/>00094 
<anchor xml:id="_audioengine_8cpp_source_1l00095"/><link linkend="_classns_audio_1_1_audio_engine_1aa541e8088c35ab41e4747ecd648e75e9">00095</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classns_audio_1_1_audio_engine_1aa541e8088c35ab41e4747ecd648e75e9">nsAudio::AudioEngine::playSoundFromFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fileName)
<anchor xml:id="_audioengine_8cpp_source_1l00096"/>00096 {
<anchor xml:id="_audioengine_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;m_soundsFromFiles.emplace_back();
<anchor xml:id="_audioengine_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_soundsFromFiles.back().openFromFile(fileName))
<anchor xml:id="_audioengine_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classns_exception_1_1_c_exception">nsException::CException</link>(<emphasis role="stringliteral">&quot;file&#32;cannot&#32;be&#32;loaded&quot;</emphasis>,&#32;<link linkend="_namespacens_exception_1ae4cd0d6bbd5590a1b121347632d41376a476dd78ae414e68d7899fc90ff757999">nsException::KFileError</link>);
<anchor xml:id="_audioengine_8cpp_source_1l00100"/>00100 
<anchor xml:id="_audioengine_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;m_soundsFromFiles.back().play();
<anchor xml:id="_audioengine_8cpp_source_1l00102"/>00102 
<anchor xml:id="_audioengine_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;removeOldSounds();
<anchor xml:id="_audioengine_8cpp_source_1l00104"/>00104 }&#32;<emphasis role="comment">//&#32;playSoundEffects()</emphasis>
<anchor xml:id="_audioengine_8cpp_source_1l00105"/>00105 
<anchor xml:id="_audioengine_8cpp_source_1l00106"/>00106 <emphasis role="keywordtype">void</emphasis>&#32;nsAudio::AudioEngine::removeOldSounds()
<anchor xml:id="_audioengine_8cpp_source_1l00107"/>00107 {
<anchor xml:id="_audioengine_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(list&lt;sf::Sound&gt;::iterator&#32;it(m_sounds.begin());&#32;it&#32;!=&#32;m_sounds.end();&#32;++it)
<anchor xml:id="_audioengine_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(it-&gt;getStatus()&#32;!=&#32;sf::Sound::Status::Playing)
<anchor xml:id="_audioengine_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;m_sounds.erase(it);
<anchor xml:id="_audioengine_8cpp_source_1l00111"/>00111 
<anchor xml:id="_audioengine_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(list&lt;sf::Music&gt;::iterator&#32;it(m_soundsFromFiles.begin());&#32;it&#32;!=&#32;m_soundsFromFiles.end();&#32;++it)
<anchor xml:id="_audioengine_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(it-&gt;getStatus()&#32;!=&#32;sf::Sound::Status::Playing)
<anchor xml:id="_audioengine_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;m_soundsFromFiles.erase(it);
<anchor xml:id="_audioengine_8cpp_source_1l00115"/>00115 }&#32;<emphasis role="comment">//&#32;removeOldSounds()</emphasis>
</programlisting></section>
